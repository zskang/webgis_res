package com.cabletech.res.service.cableequipmgr;

import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cabletech.baseinfo.business.rest.EsriRestEntity;
import com.cabletech.core.service.BaseServiceImpl;
import com.cabletech.res.entity.cableequipmgr.GzdhEntity;
import com.cabletech.res.mapper.cableequipmgr.GzdhMapper;

/**
 * 光终端盒管理
 * @author wangt 2011-05-22
 *
 */
@Service
public class GzdhServiceImpl extends BaseServiceImpl implements GzdhService {
	
	@Resource(name = "gzdhMapper")
	private GzdhMapper gzdhmapper;
	
	/**
	 * 保存
	 * @param entity 光终端盒实体
	 * @return 
	 */
	public boolean saveorupdate(GzdhEntity entity){
		try{
			EsriRestEntity esrientity = new EsriRestEntity();
			esrientity.setAttrobj(entity);
			esrientity.setRestype(super.restservice.POINT);
			esrientity.setRescode("AA006");
			esrientity.setX(entity.getProjectx());
			esrientity.setY(entity.getProjecty());
			if(StringUtils.isBlank(entity.getXtbh())){
				entity.setXtbh(super.getXTBH());
			}
			if(restservice.restPost(esrientity)){
				return true;
			}else{
				return false;
			}
		}catch (Exception e) {
			logger.error("新增或更新光终端盒：",e);
			return false;
		}
	}
	
	/**
	 * 查看
	 * @param xtbh 系统编号
	 * @return 光终端盒实体
	 */
	public GzdhEntity getbyid(String xtbh){
		return gzdhmapper.getbyid(xtbh);
	}

	@Override
	@Transactional
	public boolean delete(GzdhEntity entity) {
		try {
			gzdhmapper.deleteGzdhConnByGzdhXtbh(entity.getXtbh());
			gzdhmapper.deleteGzdhDzByGzdhXtbh(entity.getXtbh());
			gzdhmapper.delete(entity.getXtbh());
			/**
			 * 删除之内的ODF、光终端盒、光分纤箱等资源
			 */
			return true;
		} catch (Exception e) {
			logger.error("删除光终端盒：",e);
			return false;
		}
	}
	
	/**
	 * 获取Ztree的结构数据
	 * @param entity 光终端盒实体
	 */
	@Override
	public String getTreeNodes(GzdhEntity entity){
		Map<String, Object> restype = super.getResourceType();
		StringBuffer nodes = new StringBuffer();
		List<Map<String, Object>> gldlylist = gzdhmapper.getGldlyByGzdh(entity.getXtbh());
		List<Map<String, Object>> jflist = gzdhmapper.getJfByGzdh(entity.getXtbh());
		nodes.append(super.getRootNode(entity.getXtbh(), entity.getZymc(),18));
		nodes.append(super.getNode(entity.getXtbh(), "15", restype, gldlylist));
		nodes.append(super.getNode(entity.getXtbh(), "27", restype, jflist));
		return nodes.toString();
	}
	
	@Override
	@Transactional
	public boolean batchDelete(String xtbhs){
		String[] xtbh = xtbhs.split(",");
		try{
			for(int i=0; i<xtbh.length; i++){
				gzdhmapper.deleteGzdhConnByGzdhXtbh(xtbh[i]);
				gzdhmapper.deleteGzdhDzByGzdhXtbh(xtbh[i]);				
				gzdhmapper.delete(xtbh[i]);
			}
			return true;
		}catch (Exception e) {
			logger.error("删除光终端盒：",e);
			return false;
		}
	}
	
	@Override
	public boolean batchEdit(Map<String, Object> map){
		try{
			gzdhmapper.batchEdit(map);
			return true;
		}catch (Exception e) {
			logger.error("编辑光终端盒：",e);
			return false;
		}
	}	
	
	/**
	 * 获取资源树(连接管理模块需要，吕仁钊添加)
	 * @param map 表单值
	 * @return
	 */
	public List<Map<String,Object>> getResTree(String xtbh){
		return gzdhmapper.getResTree(xtbh);
	}
}
