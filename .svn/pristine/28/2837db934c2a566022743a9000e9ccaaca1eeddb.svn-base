package com.cabletech.res.service.basemgr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cabletech.baseinfo.business.rest.EsriRestEntity;
import com.cabletech.core.service.BaseServiceImpl;
import com.cabletech.res.entity.basemgr.DgxxEntity;
import com.cabletech.res.entity.basemgr.GqdEntity;
import com.cabletech.res.entity.basemgr.GqxxEntity;
import com.cabletech.res.mapper.basemgr.GqdMapper;
import com.cabletech.res.mapper.basemgr.GqxxMapper;

/**
 * 挂墙段管理
 * @author zhanglei 2011-05-11
 *
 */
@Service
public class GqdServiceImpl extends BaseServiceImpl  implements GqdService {

	@Resource(name = "gqdMapper")
	private GqdMapper gqdmapper;
	
	@Resource(name = "gqxxMapper")
	private GqxxMapper gqxxmapper;
	/**
	 * 挂墙段修改
	 * @param entity 挂墙段实体
	 */
	@Transactional
	public boolean saveorupdate(GqdEntity entity){
		try{
			List<Map<String, String>> points = new ArrayList<Map<String, String>>();
			EsriRestEntity esrientity = new EsriRestEntity();
			esrientity.setAttrobj(entity);
			esrientity.setRestype(super.restservice.LINE);
			esrientity.setRescode("AD604");			
			GqxxEntity start = gqxxmapper.getbyid(entity.getQdgq());
			Map<String, String> map = new HashMap<String, String>();
			map.put("x", start.getLon());
			map.put("y", start.getLat());
			points.add(map);
			GqxxEntity end = gqxxmapper.getbyid(entity.getZdgq());
			Map<String, String> map2 = new HashMap<String, String>();
			map2.put("x", end.getLon());
			map2.put("y", end.getLat());
			points.add(map2);
			esrientity.setList(points);
			if(StringUtils.isBlank(entity.getXtbh())){
				entity.setXtbh(super.getXTBH());
			}		
			if(super.restservice.restPost(esrientity)){
				return true;
			}else{
				return false;
			}				
		}catch (Exception e) {
			logger.error("新增或更新挂墙段实体：",e);
			return false;
		}
	}
	
	/**
	 * 单条查看挂墙段
	 * @param xtbh 系统编号
	 * @return 单条挂墙段实体
	 */
	public GqdEntity getbyid(String xtbh){
		return gqdmapper.getbyid(xtbh);
	}
	
	/**
	 * 挂墙段单条删除
	 * @param xtbh 系统编号
	 * @return Boolean 删除成功或者失败
	 */
	public Boolean delete(String xtbh){
		try {
			gqdmapper.delete(xtbh);
			return true;
		} catch (Exception e) {
			logger.error("删除挂墙段：",e);
			return false;
		}
	}
	
	/**
	 * 获取Ztree的结构数据
	 * @param entity 挂墙段实体
	 */
	@Override
	public String getTreeNodes(GqdEntity entity){
		Map<String, Object> restype = super.getResourceType();
		StringBuffer nodes = new StringBuffer();
		List<Map<String, Object>> gqxxlist = gqdmapper.getGqxxByGqd(entity.getXtbh());
		List<Map<String, Object>> gldlylist = gqdmapper.getGldlyByGqd(entity.getXtbh());
		nodes.append(super.getRootNode(entity.getXtbh(), entity.getZymc(),4));
		nodes.append(super.getNode(entity.getXtbh(), "3", restype, gqxxlist));
		nodes.append(super.getNode(entity.getXtbh(), "15", restype, gldlylist));
		return nodes.toString();
	}
	
	/**
	 * 挂墙段的批量逻辑删除
	 * @param xtbhs 挂墙段的系统编号
	 * @return true删除成功 false删除失败
	 */
	@Transactional
	public boolean batchDelete(String xtbhs){
		String[] xtbh = xtbhs.split(",");
		try{
			for(int i=0; i<xtbh.length; i++){
				gqdmapper.delete(xtbh[i]);
			}
			return true;
		}catch (Exception e) {
			logger.error("删除挂墙段：",e);
			return false;
		}
	}
	
	/**
	 * 挂墙段批量编辑
	 * @param map 表单值
	 * @return
	 */
	public boolean batchEdit(Map<String, Object> map){
		try{
			gqdmapper.batchEdit(map);
			return true;
		}catch (Exception e) {
			logger.error("编辑挂墙段：",e);
			return false;
		}
	}	
}
