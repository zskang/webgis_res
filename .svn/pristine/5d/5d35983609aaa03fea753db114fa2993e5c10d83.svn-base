package com.cabletech.res.service.publicmgr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cabletech.baseinfo.excel.ExportSupport;
import com.cabletech.core.common.Page;
import com.cabletech.core.service.BaseServiceImpl;
import com.cabletech.res.entity.publicmgr.JfxxEntity;
import com.cabletech.res.mapper.publicmgr.JfxxMapper;
import com.cabletech.res.mapper.publicmgr.OdfMapper;
import com.cabletech.res.mapper.publicmgr.OdmMapper;
import com.cabletech.res.service.common.MainTenceService;
import com.cabletech.res.service.connectmgr.ConnectService;

/**
 * 机房信息管理
 * 
 * @author wangt 2011-05-22
 * 
 */
@Service
public class JfxxServiceImpl extends BaseServiceImpl implements JfxxService,
		ExportSupport {

	/**
	 * mapper 对象
	 */
	@Resource(name = "jfxxMapper")
	private JfxxMapper jfxxmapper;

	/**
	 * 关联的odfmapper 对象
	 */
	@Resource(name = "odfMapper")
	private OdfMapper odfmapper;

	/**
	 * 
	 */
	@Resource(name = "mainTenceServiceImpl")
	private MainTenceService service;
	@Resource(name = "connectServiceImpl")
	private ConnectService connectService;

	private Map<String, Object> exportconditionmap = new HashMap<String, Object>();

	@Override
	public void setExportconditionmap(Map<String, Object> map) {
		exportconditionmap = map;
	}

	/**
	 * 保存
	 * 
	 * @param entity
	 *            机房实体
	 * @return
	 */
	public boolean saveorupdate(JfxxEntity entity) {
		try {
			if (StringUtils.isNotBlank(entity.getXtbh())) {
				jfxxmapper.update(entity);
			} else {
				entity.setXtbh(super.getXTBH());
				jfxxmapper.save(entity);
			}
			service.save(entity.getSszd(),"", "C31");
			return true;
		} catch (Exception e) {
			logger.error("新增或更新机房：", e);
			return false;
		}
	}

	/**
	 * 查看
	 * 
	 * @param xtbh
	 *            系统编号
	 * @return 机房实体
	 */
	public JfxxEntity getbyid(String xtbh) {
		return jfxxmapper.getbyid(xtbh);
	}

	@Override
	@Transactional
	public boolean delete(JfxxEntity entity) {
		try {
			odfmapper.deleteOdfDzByJfxxXtbh(entity.getXtbh());
			odfmapper.deleteOdfConnByJfxxXtbh(entity.getXtbh()); 
			odfmapper.deleteOdfByJfxxXtbh(entity.getXtbh());
			jfxxmapper.delete(entity.getXtbh());
			/**
			 * 删除之内的ODF、光终端盒、光分纤箱等资源
			 */
			return true;
		} catch (Exception e) {
			logger.error("删除机房：", e);
			return false;
		}
	}
	
	@Override
	@Transactional
	public boolean deleteDwzh(JfxxEntity entity) {
		try {
			jfxxmapper.delete(entity.getXtbh());
			return true;
		} catch (Exception e) {
			logger.error("删除机房：", e);
			return false;
		}
	}

	/**
	 * 获取Ztree的结构数据
	 * 
	 * @param entity
	 *            机房实体
	 */
	@Override
	public String getTreeNodes(JfxxEntity entity) {
		Map<String, Object> restype = super.getResourceType();
		StringBuffer nodes = new StringBuffer();
		List<Map<String, Object>> odflist = jfxxmapper.getOdfByJf(entity
				.getXtbh());
		List<Map<String, Object>> zdxxlist = jfxxmapper.getZdxxByJf(entity
				.getXtbh());
		List<Map<String, Object>> gldlylist = jfxxmapper.getGldlyByJf(entity
				.getXtbh());
		nodes.append(super.getRootNode(entity.getXtbh(), entity.getZymc(), 27));
		nodes.append(super.getNode(entity.getXtbh(), "30", restype, odflist));
		nodes.append(super.getNode(entity.getXtbh(), "28", restype, zdxxlist));
		nodes.append(super.getNode(entity.getXtbh(), "15", restype, gldlylist));
		return nodes.toString();
	}

	@Override
	@Transactional
	public boolean batchDelete(String xtbhs) {
		String[] xtbh = xtbhs.split(",");
		try {
			for (int i = 0; i < xtbh.length; i++) {
				odfmapper.deleteOdfDzByJfxxXtbh(xtbh[i]);
				odfmapper.deleteOdfConnByJfxxXtbh(xtbh[i]);
				// odmmapper.deleteOdmByJfxxXtbh(xtbh[i]);
				odfmapper.deleteOdfByJfxxXtbh(xtbh[i]);
				jfxxmapper.delete(xtbh[i]);
			}
			return true;
		} catch (Exception e) {
			logger.error("删除机房：", e);
			return false;
		}
	}

	@Override
	public boolean batchEdit(Map<String, Object> map) {
		try {
			jfxxmapper.batchEdit(map);
			return true;
		} catch (Exception e) {
			logger.error("编辑机房：", e);
			return false;
		}
	}

	/**
	 * 获取资源树(连接管理模块需要，吕仁钊添加)
	 * 
	 * @param map
	 *            表单值
	 * @return
	 */
	public List<Map<String, Object>> getResTree(String xtbh) {
		List<Map<String, Object>> treeData = new ArrayList<Map<String, Object>>();
		List<Map<String, Object>> nodes = jfxxmapper.getResTree(xtbh);
		Map<String, Object> odfnode = new HashMap<String, Object>();
		List<Map<String, Object>> odfchildren = new ArrayList<Map<String, Object>>();
		odfnode.put("ID", "-1");
		odfnode.put("NAME", "ODF");
		odfnode.put("isParent", "true");
		treeData.add(odfnode);
		Map<String, Object> gzdhnode = new HashMap<String, Object>();
		List<Map<String, Object>> gzdhchildren = new ArrayList<Map<String, Object>>();
		gzdhnode.put("ID", "-2");
		gzdhnode.put("NAME", "光终端盒");
		gzdhnode.put("isParent", "true");
		treeData.add(gzdhnode);
		Map<String, Object> gfxxnode = new HashMap<String, Object>();
		List<Map<String, Object>> gfxxchildren = new ArrayList<Map<String, Object>>();
		gfxxnode.put("ID", "-3");
		gfxxnode.put("NAME", "光分纤箱");
		gfxxnode.put("isParent", "true");
		treeData.add(gfxxnode);
		for (Map<String, Object> node : nodes) {
			String _xtbh = node.get("XTBH").toString();
			String _zylx = node.get("ZYLX").toString();
			if (_zylx.equals("AA001")) {
				List<Map<String, Object>> datas = connectService.getResTree(
						_xtbh, _zylx);
				List<Map<String, Object>> children = new ArrayList<Map<String, Object>>();
				if (datas != null && datas.size() > 0) {
					for (int i = 1; i < datas.size(); i++) {
						children.add(datas.get(i));
					}
					datas.get(0).put("children", children);
					odfchildren.add(datas.get(0));
				} else {

				}
			} else if (_zylx.equals("AA004")) {
				List<Map<String, Object>> datas = connectService.getResTree(
						_xtbh, _zylx);
				if (datas != null && datas.size() > 0) {
					gfxxchildren.add(datas.get(0));
				}
			} else {
				List<Map<String, Object>> datas = connectService.getResTree(
						_xtbh, _zylx);
				if (datas != null && datas.size() > 0) {
					gzdhchildren.add(datas.get(0));
				}
			}
		}
		odfnode.put("children", odfchildren);
		gzdhnode.put("children", gzdhchildren);
		gfxxnode.put("children", gfxxchildren);
		return treeData;
	}

	/*
	 * 获取列表
	 * 
	 * @see
	 * com.cabletech.res.service.publicmgr.JfxxService#getList(java.util.Map)
	 */
	@Override
	public List<Map<String, Object>> getJfList(Map<String, Object> map) {
		return jfxxmapper.getJfList(map);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List getExportDatas(Map<String, Object> paramet) {
		if (exportconditionmap.containsKey("simid")
				&& StringUtils.isNotBlank(exportconditionmap.get("simid")
						.toString())) {
			return jfxxmapper.queryJfxxListWithSimid(exportconditionmap);
		} else {
			return jfxxmapper.queryJfxxList(exportconditionmap);
		}
	}
}
